doctype html
script(src='https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.3.1/p5.min.js')
head
    meta(charset='utf-8')
    title Development Page

div
    p Game of Life
    input#resolution(type='text' placeholder='Resolution')
    br
    input#width(type='text' placeholder='Width')
    br
    input#height(type='text' placeholder='Height')
    br
    input#submit(type='button' value='Apply' )
    p#population 0
script.

        document.getElementById('submit').addEventListener('click', start);
        let population = document.getElementById('population');

        let w = 100;
        let h = 100;
        let resolution = 10;

        let grid;
        let cols;
        let rows;

        function start(){
            try {
                w = document.getElementById('width').value;
                h = document.getElementById('height').value;
                resolution = document.getElementById('resolution').value;

                setup();
            }catch (err) {
                console.log('Invalid inputs');
            }

        }

        function countPopulation(){
            let sum = 0;
            for (let i = 0; i < cols; i++) {
                for (let j = 0; j < rows; j++) {
                    sum += grid[i][j]
                }
            }

            population.innerText = sum;

        }





        function setup() {
            createCanvas(w, h);
            cols = w / resolution;
            rows = h / resolution;
            grid = make2DArray(cols, rows);

            for (let i = 0; i < cols; i++) {
                for (let j = 0; j < rows; j++) {
                    grid[i][j] = floor(random(2));

                }
            }


        }

        function make2DArray(cols, rows) {
            let arr = new Array(cols);
            for (let i = 0; i < arr.length; i++) {
                arr[i] = new Array(rows);
            }
            return arr;
        }


        function draw() {
            background(240);
            for (let i = 0; i < cols; i++) {
                for (let j = 0; j < rows; j++) {
                    let x = i * resolution;
                    let y = j * resolution;

                    if (grid[i][j] == 1) {
                        fill(255);
                        stroke(0);
                        rect(x, y, resolution, resolution);
                    }
                }
            }

            let next = make2DArray(cols, rows);

            //compute next based on grid

            for (let i = 0; i < cols; i++) {
                for (let j = 0; j < rows; j++) {


                    let state = grid[i][j];

                    if (i == 0 || i == cols - 1 || j == 0 || j == rows - 1) {
                        next[i][j] = state;
                    }

                    let sum = 0;
                    let neighbors = countNeighbors(grid, i, j);

                    if (state == 0 && neighbors == 3) {
                        next[i][j] = 1;
                    } else if (state == 1 && (neighbors < 2 || neighbors > 3)) {
                        next[i][j] = 0;
                    } else {
                        next[i][j] = state;
                    }


                }
            }
            grid = next;
            countPopulation();

        }

        function countNeighbors(grid, x, y) {
            let sum = 0;

            for (let i = -1; i < 2; i++) {
                for (let j = -1; j < 2; j++) {

                    let col = (x + i + cols) % cols;
                    let row = (y + j + rows) % rows;

                    //console.log(col + ' ' + row + ' ' + grid[col][row])

                    sum += grid[col][row];
                }
            }

            sum -= grid[x][y];
            return sum;
        }




