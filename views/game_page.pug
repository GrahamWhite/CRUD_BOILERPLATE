doctype html
script(src='https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.3.1/p5.min.js')
head
    meta(charset='utf-8')
    title Development Page
    link(rel="preconnect" href="https://fonts.gstatic.com")
    link(href="https://fonts.googleapis.com/css2?family=Roboto:wght@100&display=swap" rel="stylesheet")
    style(type='text/css').
        body{
            font-family: 'Roboto', sans-serif;
            background-color: #f2f2f2;


        }

div

    h3 Game of Life
    p This is a simulation that depicts the progression of populations and thermal death in the universe

    input#resolution(type='text' placeholder='Resolution')
    br
    input#width(type='text' placeholder='Width')
    br
    input#height(type='text' placeholder='Height')
    br
    input#submit(type='button' value='Apply' )
    br
    p Color
    input#colorPicker(type='color' value='#FFBB00')
    br
    p Background Color
    input#bgColorPicker(type='color' value='#0F0F0F')
    br

    br
    p Population
    p#population 0

script.

        document.getElementById('submit').addEventListener('click', start);

        let population = document.getElementById('population');


        let w = 1000 ;
        let h = 1000;
        let resolution = 4;

        let grid;
        let cols;
        let rows;

        function start(){
            try {
                w = document.getElementById('width').value;
                h = document.getElementById('height').value;
                resolution = document.getElementById('resolution').value;

                setup();
            }catch (err) {
                console.log('Invalid inputs');

            }

        }

        function countPopulation(){
            let sum = 0;
            for (let i = 0; i < cols; i++) {
                for (let j = 0; j < rows; j++) {
                    sum += grid[i][j]
                }
            }
            population.innerText = sum;
        }

        let img;

        function setup() {

            createCanvas(w, h);
            //img = loadImage('images/code_abstract.jpg');

            cols = w / resolution;
            rows = h / resolution;
            grid = make2DArray(cols, rows);
            for (let i = 0; i < cols; i++) {
                for (let j = 0; j < rows; j++) {
                    grid[i][j] = floor(random(2));

                }
            }
        }

        function make2DArray(cols, rows) {
            let arr = new Array(cols);
            for (let i = 0; i < arr.length; i++) {
                arr[i] = new Array(rows);
            }
            return arr;
        }


        function draw() {
            background(document.getElementById('bgColorPicker').value);
            //image(img, 0, 0);
            //tint(255, 50);


            for (let i = 0; i < cols; i++) {
                for (let j = 0; j < rows; j++) {
                    let x = i * resolution;
                    let y = j * resolution;
                    if (grid[i][j] == 1) {
                        fill(document.getElementById('colorPicker').value);
                        rect(x, y, resolution, resolution);
                        //noStroke();
                    }
                }
            }

            let next = make2DArray(cols, rows);

            //compute next based on grid
            for (let i = 0; i < cols; i++) {
                for (let j = 0; j < rows; j++) {
                    let state = grid[i][j];
                    let neighbors = countNeighbors(grid, i, j);

                    //Ignore edge values
                    if (i == 0 || i == cols - 1 || j == 0 || j == rows - 1) {
                        next[i][j] = state;
                    }

                    //Decision making
                    if (state == 0 && neighbors == 3) {
                        next[i][j] = 1;

                    } else if (state == 1 && (neighbors < 2 || neighbors > 3)) {
                        next[i][j] = 0;
                    } else {
                        next[i][j] = state;
                    }
                }
            }
            grid = next;
            countPopulation();



        }

        function countCellDensity(value, range) {

            let sum = 0;
            for (let i = -range; i < range; i++) {
                for (let j = -range; j < range; j++) {

                    let col = (value + i + cols) % cols;
                    let row = (value + j + rows) % rows;

                    sum += grid[col][row];


                }
            }

            sum -= grid[value][value];
            return sum;
        }



        function countNeighbors(grid, x, y) {
            let sum = 0;

            for (let i = -1; i < 2; i++) {
                for (let j = -1; j < 2; j++) {

                    let col = (x + i + cols) % cols;
                    let row = (y + j + rows) % rows;

                    //console.log(col + ' ' + row + ' ' + grid[col][row])

                    sum += grid[col][row];
                }
            }

            sum -= grid[x][y];
            return sum;
        }




